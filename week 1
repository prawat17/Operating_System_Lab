#include <stdio.h>

#define MAX_PROCESSES 10


struct Process {
    int id;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
};


void findWaitingTime(struct Process processes[], int n) {
    processes[0].waiting_time = 0;


    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
    }
}

void findTurnaroundTime(struct Process processes[], int n) {

    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].burst_time + processes[i].waiting_time;
    }
}

void findAverageTimes(struct Process processes[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage waiting time = %.2f", (float)total_waiting_time / n);
    printf("\nAverage turnaround time = %.2f", (float)total_turnaround_time / n);
}


void sortProcessesByArrival(struct Process processes[], int n) {
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].arrival_time > processes[j].arrival_time) {

                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
}


void FCFS(struct Process processes[], int n) {

    sortProcessesByArrival(processes, n);


    findWaitingTime(processes, n);
    findTurnaroundTime(processes, n);


    printf("\nProcess ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
                processes[i].id,
                processes[i].arrival_time,
                processes[i].burst_time,
                processes[i].waiting_time,
                processes[i].turnaround_time);
    }


    findAverageTimes(processes, n);
}


int main() {
    int n, choice;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESSES];

    for (int i = 0; i < n; i++) {
        printf("\nEnter details for Process %d\n", i + 1);
        processes[i].id = i + 1;
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
    }


    printf("\nChoose the CPU Scheduling Algorithm:\n");
    printf("1. FCFS\n");
    printf("2. SJF (Shortest Job First)\n");
    printf("3. Priority Scheduling\n");
    printf("4. Round Robin\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            FCFS(processes, n);
            break;
        case 2:
            printf("SJF algorithm is under development.\n");
            break;
        case 3:
            printf("Priority scheduling algorithm is under development.\n");
            break;
        case 4:
            printf("Round Robin algorithm is under development.\n");
            break;
        default:
            printf("Invalid choice!\n");
    }

    return 0;
}
